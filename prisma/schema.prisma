datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(cuid())
  name            String?
  username        String    @unique
  surname         String?
  email           String    @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  moveToDashboard Boolean   @default(false)
  accounts        Account[]
  sessions        Session[]

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  createdWorksapces Workspace[]    @relation("CreatedBy")
  subscriptions     Subscription[]
  usecase           UseCase?
  updatedTasks      Task[]         @relation(name: "TaskUpdatedByUser")
  createdTasks      Task[]         @relation(name: "TaskCreatedByUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserPermissions {
  ADMIN
  CAN_EDIT
  READ_ONLY
  OWNER
}

enum UseCase {
  WORK
  STUDY
  PERSONAL
}

model Workspace {
  id           String             @id @default(cuid())
  name         String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  creatorId    String?
  image        String?
  color        WorkspaceIconColor @default(BLUE)
  inviteCode   String             @unique
  adminCode    String             @unique
  canEditCode  String             @unique
  readOnlyCode String             @unique
  Creator      User?              @relation("CreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  subscribers  Subscription[]
  tasks        Task[]
  tags         Tag[]

  @@index([creatorId])
}

model Task {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedBy     User?     @relation(name: "TaskUpdatedByUser", fields: [updatedUserId], references: [id])
  updatedUserId String?
  creator       User     @relation(name: "TaskCreatedByUser", fields: [creatorId], references: [id])
  creatorId     String

  Workspace Workspace? @relation(fields: [workspaceId], references: [id])

  workspaceId String

  title String?

  emoji   String?
  content Json?
  tags    Tag[]

  @@index([updatedUserId])
  @@index([creatorId])
  @@index([workspaceId])
}

model Tag {
  id String @id @default(cuid())
  name String
  tasks Task[]
  color WorkspaceIconColor
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String
  @@index([workspaceId])
}

enum WorkspaceIconColor {
  PURPLE
  RED
  GREEN
  BLUE
  PINK
  YELLOW
  ORANGE
  CYAN
  LIME
  EMERALD
  INDIGO
}

model Subscription {
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  userRole    UserPermissions @default(READ_ONLY)

  @@id([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
}
